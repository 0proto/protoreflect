// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package protoparse is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Simple
	Test
	Another
	Validator
*/
package protoparse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Test_Nested__NestedNested_EEE int32

const (
	Test_Nested__NestedNested_OK Test_Nested__NestedNested_EEE = 0
	Test_Nested__NestedNested_V1 Test_Nested__NestedNested_EEE = 1
	Test_Nested__NestedNested_V2 Test_Nested__NestedNested_EEE = 2
	Test_Nested__NestedNested_V3 Test_Nested__NestedNested_EEE = 3
	Test_Nested__NestedNested_V4 Test_Nested__NestedNested_EEE = 4
	Test_Nested__NestedNested_V5 Test_Nested__NestedNested_EEE = 5
	Test_Nested__NestedNested_V6 Test_Nested__NestedNested_EEE = 6
)

var Test_Nested__NestedNested_EEE_name = map[int32]string{
	0: "OK",
	1: "V1",
	2: "V2",
	3: "V3",
	4: "V4",
	5: "V5",
	6: "V6",
}
var Test_Nested__NestedNested_EEE_value = map[string]int32{
	"OK": 0,
	"V1": 1,
	"V2": 2,
	"V3": 3,
	"V4": 4,
	"V5": 5,
	"V6": 6,
}

func (x Test_Nested__NestedNested_EEE) Enum() *Test_Nested__NestedNested_EEE {
	p := new(Test_Nested__NestedNested_EEE)
	*p = x
	return p
}
func (x Test_Nested__NestedNested_EEE) String() string {
	return proto.EnumName(Test_Nested__NestedNested_EEE_name, int32(x))
}
func (x *Test_Nested__NestedNested_EEE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Test_Nested__NestedNested_EEE_value, data, "Test_Nested__NestedNested_EEE")
	if err != nil {
		return err
	}
	*x = Test_Nested__NestedNested_EEE(value)
	return nil
}
func (Test_Nested__NestedNested_EEE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 1, 0, 0}
}

type Validator_Action int32

const (
	Validator_LOGIN Validator_Action = 0
	Validator_READ  Validator_Action = 1
	Validator_WRITE Validator_Action = 2
)

var Validator_Action_name = map[int32]string{
	0: "LOGIN",
	1: "READ",
	2: "WRITE",
}
var Validator_Action_value = map[string]int32{
	"LOGIN": 0,
	"READ":  1,
	"WRITE": 2,
}

func (x Validator_Action) Enum() *Validator_Action {
	p := new(Validator_Action)
	*p = x
	return p
}
func (x Validator_Action) String() string {
	return proto.EnumName(Validator_Action_name, int32(x))
}
func (x *Validator_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Validator_Action_value, data, "Validator_Action")
	if err != nil {
		return err
	}
	*x = Validator_Action(value)
	return nil
}
func (Validator_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Simple struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id               *uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Simple) Reset()                    { *m = Simple{} }
func (m *Simple) String() string            { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()               {}
func (*Simple) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Simple) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Simple) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type Test struct {
	Foo                          *string          `protobuf:"bytes,1,opt,name=foo,json=|foo|" json:"foo,omitempty"`
	Array                        []int32          `protobuf:"varint,2,rep,name=array" json:"array,omitempty"`
	S                            *Simple          `protobuf:"bytes,3,opt,name=s" json:"s,omitempty"`
	R                            []*Simple        `protobuf:"bytes,4,rep,name=r" json:"r,omitempty"`
	M                            map[string]int32 `protobuf:"bytes,5,rep,name=m" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	B                            []byte           `protobuf:"bytes,6,opt,name=b,def=\\000\\001\\002\\003\\004\\005\\006\\007fubar!" json:"b,omitempty"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

var extRange_Test = []proto.ExtensionRange{
	{100, 200},
	{300, 350},
	{500, 550},
}

func (*Test) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Test
}

var Default_Test_B []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\afubar!")

func (m *Test) GetFoo() string {
	if m != nil && m.Foo != nil {
		return *m.Foo
	}
	return ""
}

func (m *Test) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Test) GetS() *Simple {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *Test) GetR() []*Simple {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Test) GetM() map[string]int32 {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *Test) GetB() []byte {
	if m != nil && m.B != nil {
		return m.B
	}
	return append([]byte(nil), Default_Test_B...)
}

type Test_Nested struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Test_Nested) Reset()                    { *m = Test_Nested{} }
func (m *Test_Nested) String() string            { return proto.CompactTextString(m) }
func (*Test_Nested) ProtoMessage()               {}
func (*Test_Nested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

var E_Test_Nested_Fooblez = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         20003,
	Name:          "foo.bar.Test.Nested.fooblez",
	Tag:           "varint,20003,opt,name=fooblez",
	Filename:      "test.proto",
}

type Test_Nested__NestedNested struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Test_Nested__NestedNested) Reset()                    { *m = Test_Nested__NestedNested{} }
func (m *Test_Nested__NestedNested) String() string            { return proto.CompactTextString(m) }
func (*Test_Nested__NestedNested) ProtoMessage()               {}
func (*Test_Nested__NestedNested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1, 0} }

var E_Test_Nested_XNestedNested_XGarblez = &proto.ExtensionDesc{
	ExtendedType:  (*Test)(nil),
	ExtensionType: (*string)(nil),
	Field:         100,
	Name:          "foo.bar.Test.Nested._NestedNested._garblez",
	Tag:           "bytes,100,opt,name=_garblez,json=Garblez",
	Filename:      "test.proto",
}

type Test_Nested__NestedNested_NestedNestedNested struct {
	Test             *Test  `protobuf:"bytes,1,opt,name=Test" json:"Test,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Test_Nested__NestedNested_NestedNestedNested) Reset() {
	*m = Test_Nested__NestedNested_NestedNestedNested{}
}
func (m *Test_Nested__NestedNested_NestedNestedNested) String() string {
	return proto.CompactTextString(m)
}
func (*Test_Nested__NestedNested_NestedNestedNested) ProtoMessage() {}
func (*Test_Nested__NestedNested_NestedNestedNested) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 1, 0, 0}
}

func (m *Test_Nested__NestedNested_NestedNestedNested) GetTest() *Test {
	if m != nil {
		return m.Test
	}
	return nil
}

type Another struct {
	Test             *Test                          `protobuf:"bytes,1,opt,name=test" json:"test,omitempty"`
	Fff              *Test_Nested__NestedNested_EEE `protobuf:"varint,2,opt,name=fff,enum=foo.bar.Test_Nested__NestedNested_EEE,def=1" json:"fff,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *Another) Reset()                    { *m = Another{} }
func (m *Another) String() string            { return proto.CompactTextString(m) }
func (*Another) ProtoMessage()               {}
func (*Another) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_Another_Fff Test_Nested__NestedNested_EEE = Test_Nested__NestedNested_V1

func (m *Another) GetTest() *Test {
	if m != nil {
		return m.Test
	}
	return nil
}

func (m *Another) GetFff() Test_Nested__NestedNested_EEE {
	if m != nil && m.Fff != nil {
		return *m.Fff
	}
	return Default_Another_Fff
}

type Validator struct {
	Authenticated    *bool                   `protobuf:"varint,1,opt,name=authenticated" json:"authenticated,omitempty"`
	Permission       []*Validator_Permission `protobuf:"bytes,2,rep,name=permission" json:"permission,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Validator) GetAuthenticated() bool {
	if m != nil && m.Authenticated != nil {
		return *m.Authenticated
	}
	return false
}

func (m *Validator) GetPermission() []*Validator_Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type Validator_Permission struct {
	Action           *Validator_Action `protobuf:"varint,1,opt,name=action,enum=foo.bar.Validator_Action" json:"action,omitempty"`
	Entity           *string           `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Validator_Permission) Reset()                    { *m = Validator_Permission{} }
func (m *Validator_Permission) String() string            { return proto.CompactTextString(m) }
func (*Validator_Permission) ProtoMessage()               {}
func (*Validator_Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *Validator_Permission) GetAction() Validator_Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Validator_LOGIN
}

func (m *Validator_Permission) GetEntity() string {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return ""
}

var E_Label = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ExtensionRangeOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         20000,
	Name:          "foo.bar.label",
	Tag:           "bytes,20000,opt,name=label",
	Filename:      "test.proto",
}

var E_Rept = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: ([]*Test)(nil),
	Field:         20002,
	Name:          "foo.bar.rept",
	Tag:           "bytes,20002,rep,name=rept",
	Filename:      "test.proto",
}

var E_Eee = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*Test_Nested__NestedNested_EEE)(nil),
	Field:         20010,
	Name:          "foo.bar.eee",
	Tag:           "varint,20010,opt,name=eee,enum=foo.bar.Test_Nested__NestedNested_EEE",
	Filename:      "test.proto",
}

var E_A = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*Another)(nil),
	Field:         20020,
	Name:          "foo.bar.a",
	Tag:           "bytes,20020,opt,name=a",
	Filename:      "test.proto",
}

var E_Validator = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*Validator)(nil),
	Field:         12345,
	Name:          "foo.bar.validator",
	Tag:           "bytes,12345,opt,name=validator",
	Filename:      "test.proto",
}

func init() {
	proto.RegisterType((*Simple)(nil), "foo.bar.Simple")
	proto.RegisterType((*Test)(nil), "foo.bar.Test")
	proto.RegisterType((*Test_Nested)(nil), "foo.bar.Test.Nested")
	proto.RegisterType((*Test_Nested__NestedNested)(nil), "foo.bar.Test.Nested._NestedNested")
	proto.RegisterType((*Test_Nested__NestedNested_NestedNestedNested)(nil), "foo.bar.Test.Nested._NestedNested.NestedNestedNested")
	proto.RegisterType((*Another)(nil), "foo.bar.Another")
	proto.RegisterType((*Validator)(nil), "foo.bar.Validator")
	proto.RegisterType((*Validator_Permission)(nil), "foo.bar.Validator.Permission")
	proto.RegisterEnum("foo.bar.Test_Nested__NestedNested_EEE", Test_Nested__NestedNested_EEE_name, Test_Nested__NestedNested_EEE_value)
	proto.RegisterEnum("foo.bar.Validator_Action", Validator_Action_name, Validator_Action_value)
	proto.RegisterExtension(E_Test_Nested_Fooblez)
	proto.RegisterExtension(E_Test_Nested_XNestedNested_XGarblez)
	proto.RegisterExtension(E_Label)
	proto.RegisterExtension(E_Rept)
	proto.RegisterExtension(E_Eee)
	proto.RegisterExtension(E_A)
	proto.RegisterExtension(E_Validator)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1004 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xec, 0xec, 0x6e, 0x76, 0x5f, 0xfe, 0x30, 0x1a, 0x02, 0x32, 0x2b, 0x95, 0xba, 0x06,
	0x45, 0x56, 0x04, 0x9b, 0x8d, 0x9b, 0x14, 0xb4, 0xb4, 0x48, 0x41, 0xb5, 0xa2, 0x08, 0x9a, 0xc0,
	0xb6, 0xa4, 0x12, 0x58, 0x2a, 0xbb, 0xde, 0x59, 0x7b, 0x8b, 0xed, 0xb1, 0x76, 0xc7, 0x11, 0x09,
	0x3d, 0x35, 0xdf, 0x20, 0xa7, 0x1e, 0x72, 0x00, 0x73, 0x40, 0x02, 0x8e, 0x5c, 0x38, 0x72, 0x2b,
	0x95, 0x2a, 0x71, 0xe5, 0x84, 0x64, 0x7f, 0x04, 0xe0, 0x8e, 0x76, 0x76, 0xe3, 0xd4, 0x6d, 0x50,
	0xc4, 0xc5, 0x6f, 0xde, 0xbf, 0xdf, 0xcc, 0x7b, 0xef, 0xf7, 0xbc, 0x00, 0x82, 0xa5, 0xc2, 0xee,
	0x27, 0x5c, 0x70, 0x3a, 0x1b, 0x71, 0x6e, 0x07, 0x7e, 0x62, 0x95, 0x5b, 0x9c, 0xb7, 0x3a, 0x6c,
	0x55, 0x9a, 0x83, 0x41, 0xb4, 0x1a, 0xb2, 0xb4, 0x99, 0xc4, 0x7d, 0xc1, 0x93, 0x3c, 0xb4, 0xf2,
	0x16, 0xe8, 0xb7, 0xe3, 0x6e, 0xbf, 0xc3, 0x28, 0x05, 0xb5, 0xe7, 0x77, 0x59, 0x09, 0x95, 0x51,
	0xd5, 0xf4, 0xe4, 0x99, 0x2e, 0x82, 0x12, 0x87, 0x25, 0xa5, 0x8c, 0xaa, 0xaa, 0xa7, 0xc4, 0x61,
	0xe5, 0xa9, 0x0a, 0xea, 0x1d, 0x96, 0x0a, 0x4a, 0x01, 0x47, 0x9c, 0x17, 0xb1, 0xda, 0x83, 0x88,
	0xf3, 0x07, 0x74, 0x09, 0x34, 0x3f, 0x49, 0xfc, 0x83, 0x92, 0x52, 0xc6, 0x55, 0xcd, 0xcb, 0x15,
	0x7a, 0x09, 0x50, 0x5a, 0xc2, 0x65, 0x54, 0x9d, 0xab, 0xbd, 0x64, 0x17, 0xef, 0xb2, 0xf3, 0x2b,
	0x3d, 0x94, 0x66, 0xee, 0xa4, 0xa4, 0x96, 0xf1, 0xb9, 0xee, 0x84, 0x56, 0x00, 0x75, 0x4b, 0x9a,
	0x74, 0x2f, 0x4d, 0xdc, 0xd9, 0x0b, 0xec, 0x5b, 0xf5, 0x9e, 0x48, 0x0e, 0x3c, 0xd4, 0xa5, 0xeb,
	0x80, 0x82, 0x92, 0x5e, 0x46, 0xd5, 0x79, 0x77, 0xb9, 0xe1, 0x38, 0x4e, 0xc3, 0x71, 0xd6, 0x1a,
	0x8e, 0x53, 0x6b, 0x38, 0xce, 0xd5, 0x86, 0xe3, 0xac, 0x37, 0x1c, 0x67, 0xa3, 0xe1, 0x38, 0xd7,
	0x1a, 0x8e, 0xf3, 0x4e, 0x34, 0x08, 0xfc, 0xe4, 0x8a, 0x87, 0x02, 0x6b, 0x1d, 0xf4, 0x1c, 0x82,
	0x12, 0xc0, 0x5f, 0xb2, 0x83, 0xa2, 0x96, 0xec, 0x98, 0x55, 0xb2, 0xef, 0x77, 0x06, 0x4c, 0x56,
	0xae, 0x79, 0xb9, 0xe2, 0x2a, 0xef, 0x22, 0xeb, 0x5b, 0x05, 0xf4, 0x1d, 0x96, 0x0a, 0x16, 0x5a,
	0x7f, 0x20, 0x58, 0xb8, 0x97, 0x9f, 0x0b, 0xcb, 0x36, 0xd0, 0x67, 0xf5, 0xfc, 0x97, 0x5e, 0xc9,
	0x5b, 0x26, 0xf1, 0xe7, 0x6a, 0x0b, 0x53, 0x55, 0x78, 0xd2, 0xe5, 0x92, 0xe3, 0x91, 0x39, 0x0f,
	0xb8, 0xcd, 0xf9, 0x50, 0x57, 0xd3, 0x3e, 0xe7, 0x95, 0x1b, 0x80, 0xeb, 0xf5, 0x3a, 0xd5, 0x41,
	0xd9, 0xfd, 0x90, 0xcc, 0x64, 0x72, 0x6f, 0x8d, 0x20, 0x29, 0x6b, 0x44, 0x91, 0xf2, 0x2a, 0xc1,
	0x52, 0xae, 0x13, 0x55, 0xca, 0x0d, 0xa2, 0x49, 0x79, 0x8d, 0xe8, 0xb5, 0x2a, 0x18, 0xf7, 0x5a,
	0x7e, 0x12, 0x74, 0xd8, 0x21, 0x9d, 0xbe, 0xb1, 0x14, 0xca, 0x32, 0x67, 0xb7, 0x72, 0xaf, 0xbb,
	0x74, 0x3c, 0x32, 0xe7, 0x00, 0xb7, 0xb2, 0xab, 0x71, 0xc0, 0xf9, 0xa3, 0x91, 0xf9, 0xcf, 0x4e,
	0xed, 0x3d, 0xc8, 0x28, 0x24, 0xd3, 0x2f, 0xdb, 0x39, 0x87, 0xec, 0x53, 0x0e, 0xd9, 0xb7, 0x58,
	0x9a, 0xfa, 0x2d, 0xb6, 0xdb, 0x17, 0x31, 0xef, 0xa5, 0xa5, 0xef, 0x4e, 0x90, 0xec, 0xd2, 0x69,
	0xc6, 0x8a, 0x66, 0x84, 0xe4, 0x37, 0xb4, 0x42, 0x8c, 0x9f, 0x14, 0xf2, 0xa7, 0x62, 0x19, 0x0f,
	0x47, 0xa6, 0x7a, 0xdf, 0x3f, 0x3c, 0x5c, 0x21, 0xc6, 0xdf, 0x98, 0x7c, 0xaf, 0x9e, 0x59, 0x2a,
	0x8f, 0x14, 0x98, 0xdd, 0xec, 0x71, 0xd1, 0x66, 0x49, 0xd6, 0x27, 0xf1, 0xdf, 0x7d, 0xca, 0x5c,
	0xf4, 0x3a, 0xe0, 0x28, 0x8a, 0xe4, 0x54, 0x16, 0x6b, 0xcb, 0xd3, 0x7c, 0xc8, 0xbb, 0x6d, 0x4f,
	0x4d, 0xc4, 0xae, 0xd7, 0xeb, 0xae, 0xb2, 0xb7, 0xe6, 0x65, 0x69, 0xee, 0x8f, 0xe8, 0x78, 0x64,
	0xbe, 0x01, 0xd8, 0x0f, 0x9a, 0x04, 0x11, 0x85, 0x60, 0x6b, 0x56, 0xb2, 0x98, 0x7c, 0x5d, 0xc1,
	0x80, 0xa2, 0xec, 0x27, 0xad, 0x60, 0xf2, 0x18, 0x1f, 0x8f, 0xcc, 0xcb, 0x80, 0x43, 0x16, 0x11,
	0x4c, 0x14, 0x82, 0x2c, 0x03, 0x70, 0xe0, 0x27, 0xe4, 0x57, 0x25, 0x0b, 0x69, 0xc9, 0xb8, 0xe3,
	0x91, 0xa9, 0xc9, 0x90, 0xdf, 0x47, 0x26, 0x1a, 0x8e, 0x4d, 0x85, 0xcc, 0x0c, 0xc7, 0xe6, 0x2b,
	0xf0, 0xf2, 0x4a, 0x81, 0x19, 0xae, 0x14, 0x59, 0x8f, 0x33, 0xf7, 0x2c, 0x68, 0x80, 0xbb, 0xcb,
	0xdd, 0xe1, 0xd8, 0x04, 0x30, 0x2c, 0x1d, 0xd4, 0x03, 0xde, 0xe1, 0xc3, 0xb1, 0x69, 0x80, 0x6e,
	0xa9, 0xe4, 0xe9, 0x91, 0x3e, 0x1c, 0x9b, 0x2a, 0x28, 0x04, 0x15, 0x52, 0xa9, 0xfc, 0x85, 0xc0,
	0xdc, 0xf3, 0x3b, 0x71, 0xe8, 0x0b, 0x9e, 0xd0, 0x37, 0x61, 0xc1, 0x1f, 0x88, 0x36, 0xeb, 0x89,
	0xb8, 0xe9, 0x0b, 0x16, 0xca, 0x2e, 0x19, 0xde, 0xb4, 0x91, 0xde, 0x00, 0xe8, 0xb3, 0xa4, 0x1b,
	0xa7, 0x69, 0xcc, 0x7b, 0x72, 0x0d, 0xe7, 0x6a, 0x97, 0x26, 0x6d, 0x9a, 0xa0, 0xd9, 0x1f, 0x4f,
	0x82, 0xbc, 0x67, 0x12, 0xac, 0xbb, 0x00, 0x67, 0x1e, 0xba, 0x06, 0xba, 0xdf, 0xcc, 0x46, 0x2c,
	0xef, 0x5a, 0xac, 0xbd, 0x76, 0x0e, 0xd0, 0xa6, 0x0c, 0xf0, 0x8a, 0x40, 0xfa, 0x2a, 0xe8, 0xd9,
	0x63, 0xc4, 0x81, 0x1c, 0x91, 0xe9, 0x15, 0x5a, 0xa5, 0x0a, 0x7a, 0x1e, 0x49, 0x4d, 0xd0, 0x3e,
	0xda, 0xdd, 0xda, 0xde, 0x21, 0x33, 0xd4, 0x00, 0xd5, 0xab, 0x6f, 0xde, 0x24, 0x28, 0x33, 0xde,
	0xf5, 0xb6, 0xef, 0xd4, 0x89, 0x52, 0x7b, 0x88, 0x60, 0x2e, 0x1b, 0xe7, 0x6d, 0x96, 0xec, 0xc7,
	0x4d, 0x46, 0xaf, 0x83, 0xf1, 0x69, 0xca, 0x92, 0xcd, 0x81, 0x68, 0x3f, 0x47, 0x64, 0x6b, 0x5a,
	0xad, 0xd0, 0x27, 0x47, 0xfa, 0xa2, 0x81, 0x28, 0x18, 0x33, 0x54, 0x6f, 0x76, 0x62, 0xd6, 0x13,
	0x74, 0x03, 0xf0, 0x16, 0x13, 0x17, 0x24, 0x92, 0x27, 0x47, 0xfa, 0xbc, 0x81, 0xa8, 0x61, 0x20,
	0xaa, 0x0e, 0x52, 0x96, 0xb8, 0xef, 0x83, 0xd6, 0xf1, 0x03, 0xd6, 0xa1, 0xcb, 0x2f, 0x70, 0xbf,
	0xfe, 0x95, 0x60, 0x3d, 0xd9, 0x38, 0xbf, 0x77, 0xb6, 0x02, 0xdf, 0x9c, 0x14, 0x7f, 0x84, 0x32,
	0xcd, 0xbd, 0x09, 0x6a, 0xc2, 0xfa, 0xe2, 0xe2, 0xd5, 0x19, 0x9e, 0x20, 0x39, 0xa3, 0xe7, 0xc9,
	0x9e, 0x65, 0xbb, 0x9f, 0x03, 0x66, 0x8c, 0x5d, 0x0c, 0xf2, 0xc3, 0x09, 0xfa, 0x3f, 0xfb, 0xe0,
	0x65, 0xa8, 0xee, 0x26, 0x20, 0xff, 0x62, 0xe8, 0x9f, 0x4f, 0xf2, 0x65, 0x24, 0x13, 0xe8, 0x62,
	0x59, 0x3d, 0xe4, 0xbb, 0x9f, 0x80, 0xb9, 0x3f, 0xe1, 0xe7, 0xeb, 0xe7, 0x40, 0x89, 0x36, 0x0f,
	0x4f, 0x91, 0x7e, 0xf9, 0x42, 0x02, 0xd1, 0x17, 0x39, 0xe4, 0x9d, 0xa1, 0x7c, 0xb0, 0xfa, 0xd9,
	0xdb, 0xad, 0x58, 0xb4, 0x07, 0x81, 0xdd, 0xe4, 0xdd, 0xd5, 0xfb, 0xed, 0x41, 0xb7, 0x9f, 0x7f,
	0xba, 0x12, 0x16, 0x75, 0x58, 0x53, 0xc8, 0xcf, 0x57, 0x6e, 0xe9, 0xfb, 0x49, 0xca, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0xd9, 0x50, 0xcb, 0xf5, 0x06, 0x00, 0x00,
}
